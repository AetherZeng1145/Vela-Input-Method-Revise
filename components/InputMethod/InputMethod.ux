<!-- InputMethod.ux - Refactored Version 4.0 (Template - Rect Screen QWERTY Only for Redmi Watch 5) -->
<template>
  <div class="page" style="flex-direction: column;">
    <div style="background-color:black">
      
      <!-- 【创世】这是方屏版本的唯一根容器 -->
      <!-- 【原生适配】容器宽度设为 100%，高度设为 276px (这是原代码中为方屏设定的键盘区域高度) -->
      <div style="width: 100%; height: 276px; flex-direction: column;">

        <!-- 顶部功能/候选栏 -->
        <div style="width: 100%; flex-direction: row; justify-content: center; top:6px; padding:0 6px;">
          <img src="./assets/horizontal/cn.png" style="padding: 6px;width: 60px;height: 60px;" @click="onBtnClick('lang')" if="{{!numFlag && lang==='cn'}}" />
          
          <!-- 候选词区域 -->
          <div if="{{lang === 'cn' && !numFlag}}" style="margin-left: 6px;flex: 1;height: 60px;background-color:#262626;border-color: #333333; border-width: 3px; border-radius: 100px;flex-direction: row;align-items:center">
            <scroll id="cvalWaiting" scroll-x="{{true}}" style="position:absolute;width: 85%;height: 42px;">
              <div static style="position: absolute;left: 0px;height: 42px;padding-left:20px;padding-right:20px">
                <text class="calbtn02" style="padding-right:10px" @click="pushCval">{{cval}}</text>
                <text for="{{cvalList}}" show="{{resultList.length > $idx}}" class="calbtn02" style="padding-right:10px" @click="onRsSelect(resultList[$idx])">{{resultList[$idx]}}</text>
              </div>
            </scroll>
            <img if="{{resultList.length > 0}}" style="position:absolute;right: 8px; width: 60px;height: 40px;" src="./assets/horizontal/down2.png" @click="onBtnClick('down')" />
          </div>
        
          <img src="./assets/horizontal/en.png" style="padding: 6px;width: 60px;height: 60px;" @click="onBtnClick('lang')" if="{{!numFlag && lang==='en'}}" />
          <img src="./assets/horizontal/bigA.png" style="padding: 6px;margin-left: 6px;width:94px;height:60px;" @click="onBtnClick('switchLow')" if="{{upperFlag && lang==='en'&& !numFlag}}" />
          <img src="./assets/horizontal/a.png" style="padding: 6px;margin-left: 6px;width:94px;height:60px;" @click="onBtnClick('switchUpper')" if="{{!upperFlag && lang==='en'&& !numFlag}}" />
          <img src="./assets/horizontal/123.png" style="margin-left: 6px;padding: 6px;margin-left: 6px;width: 94px;height: 60px;" @click="onBtnClick('switchNum')" if="{{!numFlag && lang==='en'}}" />
          <img src="./assets/horizontal/back2.png" style="margin-left: 6px;padding: 6px;width: 159px;height: 60px;" @click="onBtnClick('switchCn')" if="{{numFlag}}" />
          
          <img if="{{!numFlag}}" src="./assets/horizontal/del.png" style="margin-left: 6px;padding: 6px;width: 60px;height: 60px;" @click="onBtnClick('D')" />
          <img else src="./assets/horizontal/del2.png" style="margin-left: 6px;padding: 6px;" @click="onBtnClick('D')" />
        </div>

        <!-- 键盘主体区域 -->
        <div style="position:absolute; top: 70px; width:100%; height:206px; justify-content: center;">
          <!-- 进度条 (可考虑是否保留) -->
          <progress percent="{{percent}}" style="position:absolute;bottom: 12px;width:80px;color:#ffffff;stroke-width:6px;layer-color:#262626;"></progress>
          
          <!-- 键盘滚动区域 -->
          <scroll id="keyboardRect" scroll-x="{{true}}" onscroll="handelScroll">
            <!-- 字母键盘 -->
            <div if="{{!numFlag}}" style="left: 6px; flex-direction: column;">
              <div static style="margin-left: 0px;margin-top: 0px;height: 60px;">
                <text class="calbtnRect" for="{{item in keys['full'][0]}}" @click="onSelect(item)">{{item}}</text>
              </div>
              <div static style="margin-left: 32px;margin-top: -5px;height: 60px;">
                <text class="calbtnRect" for="{{item in keys['full'][1]}}" @click="onSelect(item)">{{item}}</text>
              </div>
              <div static style="margin-left: 64px;margin-top: -5px;height: 60px;">
                <text class="calbtnRect" for="{{item in keys['full'][2]}}" @click="onSelect(item)">{{item}}</text>
                <img static src="./assets/horizontal/space.png" style="width: 60px;height: 60px;" @click="onBtnClick('space')" />
              </div>
            </div>
            <!-- 数字/符号键盘 -->
            <div else style="left: 6px; flex-direction: column;">
              <div static style="margin-left: 0px;margin-top: 0px;height: 60px;">
                <text class="calbtnRect" for="{{item in keys['sign'][0]}}" @click="onSelect(item)">{{item}}</text>
              </div>
              <div static style="margin-left: 32px;margin-top: -5px;height: 60px;">
                <text class="calbtnRect" for="{{item in keys['sign'][1]}}" @click="onSelect(item)">{{item}}</text>
              </div>
              <div static style="margin-left: 64px;margin-top: -5px;height: 60px;">
                <text class="calbtnRect" for="{{item in keys['sign'][2]}}" @click="onSelect(item)">{{item}}</text>
              </div>
            </div>
          </scroll>
        </div>

        <!-- 展开的候选词列表 (全屏覆盖) -->
        <div style="position: absolute;left: 0px;top: 0px;width: 100%;height: 276px;background-color: black; justify-content:center; flex-direction:column; align-items:center" if="{{downFlag==='down'}}">
          <div static class="listRect">
            <list static style="width:100%;height:100%;">
              <list-item type="waitingRowsRect" class="itemRect" for="{{itemArray in resultList2}}">
                <div class="item column center" for="{{item in itemArray}}">
                  <input class="calbtn02" type="button" value="{{item}}" @click="onRsSelect(item)" />
                </div>
              </list-item>
            </list>
          </div>
          <img static style="margin-top:5px" src="./assets/horizontal/up2.png" @click="onBtnClick('down')" />
        </div>

      </div>
    </div>
  </div>
</template>


<script>
import vibrator from "@system.vibrator";
import { SimpleInputMethod } from "./assets/dicUtil.js";

function doSearchDic(word, cb) {
  let hanzi = SimpleInputMethod.getHanzi(word);
  if (hanzi && hanzi[0]) {
    cb(hanzi[0]);
  } else {
    cb([]);
  }
}
function deleteLast(t) {
  if (t) {
    return t.substr(0, t.length - 1);
  }
  return "";
}

export default {
  // 【创世】只保留最核心的 props
  props: {
    hide: {
      default: true,
    },
    maxlength: {
      default: 5,
    },
    vibratemode: {
      default: "",
    },
  },
  data: {
    cval: "",
    resultList: [],
    resultList2: [],
    // 【创世】T9的 waitingList 逻辑与拼音输入有关，予以保留
    waitingList: [],
    waitingIndex: -1,
    lastWaitingStr: "",
    downFlag: "",
    lang: "cn",
    numFlag: false,
    upperFlag: false,
    cvalList: [0, 1, 2, 3, 4],
    // 【创世】重命名滚动百分比变量
    scrollPercent: 50, 
    keys: {
      // 【创世】只保留方屏布局需要的 full 和 sign 按键集
      full: [
        ["Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P"],
        ["A", "S", "D", "F", "G", "H", "J", "K", "L"],
        ["Z", "X", "C", "V", "B", "N", "M"],
      ],
      sign: [
        ["1", "2", "3", "4", "5", "6", "7", "8", "9", "0"],
        ["~", "!", "@", "#", "%", "“", "”", "*", "?", "/"],
        ["(", ")", "-", "_", ":", ";", "，", "。", "."],
      ],
    },
  },
  onInit() {
    if (this.maxlength) {
      const tempCvalList = [];
      for (let i = 0; i < this.maxlength; i++) {
        tempCvalList.push(i);
      }
      this.cvalList = tempCvalList;
    }
    this.$watch("hide", "watchHidePropsChange");
    this.$watch("maxlength", "watchMaxLengthPropsChange");
  },
  addAllTxt(txt) {
    this.$emit("complete", { content: txt });
  },
  onRsSelect(txt) {
    this.onVibrate();
    this.cval = "";
    this.addAllTxt(txt);
    this.clearWaiting();
    this.resetReslutList();
    this.downFlag = "";
  },
  onBtnClick(sign) {
    this.onVibrate();
    switch (sign) {
      case "AC":
        this.cval = "";
        this.clearWaiting();
        this.resetReslutList();
        break;
      case "lang":
        if (this.lang === "cn") {
          this.lang = "en";
        } else {
          this.lang = "cn";
        }
        this.cval = "";
        this.clearWaiting();
        this.resetReslutList();
        break;
      case "D":
        if (this.waitingIndex >= 0) {
          this.clearWaiting();
          this.resetReslutList();
        } else if (this.cval.length > 0) {
          this.cval = deleteLast(this.cval);
          this.resetReslutList();
        } else {
          this.$emit("delete", {});
        }
        break;
      case "space":
        this.addAllTxt(" ");
        break;
      case "down":
        this.downFlag = this.downFlag === "down" ? "" : "down";
        break;
      case "switchNum":
        this.numFlag = true;
        this.cval = "";
        this.clearWaiting();
        this.resetReslutList();
        break;
      case "switchCn":
        this.numFlag = false;
        break;
      case "switchUpper":
        this.upperFlag = true;
        break;
      case "switchLow":
        this.upperFlag = false;
        break;
    }
  },
  clearWaiting() {
    this.waitingList = [];
    this.waitingIndex = -1;
    this.lastWaitingStr = "";
  },
  resetReslutList() {
    // 【创世】方屏的候选词滚动逻辑
    this.$element("cvalWaiting").scrollTo({
      top: 0,
      left: 0,
      behavior: "smooth",
    });
    
    let watingStr = "";
    if (this.lastWaitingStr && this.lastWaitingStr[this.waitingIndex]) {
      watingStr = this.lastWaitingStr[this.waitingIndex];
    }
    if (!(this.cval + watingStr) || this.lang != "cn") {
      this.resultList = [];
      this.setResultListAll();
      return;
    }
    this.getResultByWord(this.cval + watingStr);
  },
  setResultListAll() {
    this.resultList2 = [];
    let array = [];
    for (let i = 0; i < this.resultList.length; i++) {
      array.push(this.resultList[i]);
      if (array.length === parseInt(this.maxlength)) {
        this.resultList2.push(array);
        array = [];
      }
    }
    if (array.length > 0 && array.length < parseInt(this.maxlength)) {
      this.resultList2.push(array);
    }
  },
  getResultByWord(val) {
    const that = this;
    doSearchDic(val, function (data) {
      that.resultList = data;
      that.setResultListAll();
    });
  },
  onSelect(num) {
    this.$emit("keyDown", { content: num });
    this.onVibrate();
    if (this.lang === "cn" && !this.numFlag) {
      this.cval += num.toLowerCase();
    } else if (this.lang === "en" && !this.numFlag) {
      if (this.upperFlag) {
        this.addAllTxt(num.toUpperCase());
      } else {
        this.addAllTxt(num.toLowerCase());
      }
    } else {
      this.addAllTxt(num);
    }
    this.resetReslutList();
  },
  onSelectWaiting(num) {
    this.onVibrate();
    if (this.lang === "cn") {
      this.cval += this.waitingList[num].toString();
    } else {
      if (this.upperFlag) {
        this.addAllTxt(this.waitingList[num].toUpperCase());
      } else {
        this.addAllTxt(this.waitingList[num].toLowerCase());
      }
    }
    this.clearWaiting();
    this.resetReslutList();
  },
  watchHidePropsChange(newV, oldV) {
    this.$emit("visibilityChange", { visible: newV });
  },
  watchMaxLengthPropsChange(newV, oldV) {
    if (newV) {
      const tempCvalList = [];
      for (let i = 0; i < newV; i++) {
        tempCvalList.push(i);
      }
      this.cvalList = tempCvalList;
    }
  },
  onVibrate() {
    if (this.vibratemode != "") {
      vibrator.vibrate({ mode: this.vibratemode });
    }
  },
  // 【创世】重命名并简化滚动处理方法
  handleRectScroll(event) {
    // 这里的 636 是原作者写死的一个值，代表可滚动的总宽度，我们暂时保留
    // 后续可以根据实际渲染的宽度动态计算
    let percentTemp = (event.scrollX / 636) * 100 + 52.8;
    this.scrollPercent = parseInt(percentTemp <= 100 ? percentTemp : 100);
  },
  pushCval() {
    this.onVibrate();
    let temp = this.cval;
    this.cval = "";
    this.clearWaiting();
    this.resetReslutList();
    this.addAllTxt(temp);
  },
};
</script>


<style>

.page {
	width:100%;
	position:absolute;
	left:0;
	bottom:0
}
.item {
	height:52px;
	flex:1
}
.calbtn02 { 
	color:rgb(255,255,255);
	background-color:rgba(38,38,38,0);
	border-radius:0px;
	font-size:32px;
	text-align:center;
	height:42px;
}
.caltext { 
	text-align:left;
	line-height:38px;
	lines:1;
	text-overflow:ellipsis;
	color:#0d84ff;
	height:45px;
	font-size:28px;
	text-align:left;
	font-weight:bold;
	padding-left:8px
}
.waiting-keys { 
	width:36px;
	height:40px;
	text-align: center;
}


.calbtnRect {
	color:rgb(255,255,255);
	font-size:32px;
	font-weight:bold;
	background-color:rgb(38,38,38);
	margin-right:4px;
	width:62px; 
	height:62px;
	border-radius:15px;
	text-align:center;
	border:3px solid rgba(255,255,255,0.06);
}

#keyboardRect {
	position:absolute;
	left:0px;
	top:0px;
	width:100%;
	height:100%;
}

.listRect {
	top:0px;
	width:95%; 
	height:180px; 
	border-radius:20px;
	background-color:#262626;
	border:3px solid rgba(255,255,255,0.06);
	padding:10px;
}

.itemRect {
	height:55px;
}

</style>
